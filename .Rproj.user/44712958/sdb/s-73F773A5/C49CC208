{
    "collab_server" : "",
    "contents" : "library(reshape2)\nlibrary(functInterp)\nlibrary(ggplot2)\nlibrary(fTree)\nlibrary(fda)\nlibrary(plyr)\nlibrary(abind)\nlibrary(foreach)\nrequire(doParallel)\nlibrary(geoR)\nlibrary(DiceKriging)\n\nassemble <- function(.oilMEAN, .oilFPCS, .scores){\n  return(apply(.scores, 1, function(x) .oilMEAN + .oilFPCS %*% x))\n}\n\ncomputeSSE <- function(.forecasts, .true){\n  .A <- (.forecasts - .true)^2\n  return(colSums(.A))\n}\n\n# Load raw data: MAC\nrawProduction <- read.table(\"~/Google Drive/Anadarko/data_raw/productionData.csv\", sep=\",\", header = TRUE)\nrawCompletion <- read.csv(\"~/Google Drive/Anadarko/data_raw/completionData.csv\", header = TRUE, stringsAsFactors = FALSE)\ncompletionFlags <- read.table(\"~/Google Drive/Anadarko/data_raw/completionFlags copy.csv\", header=FALSE, sep=\",\",\n                              colClasses = c(\"character\",\"logical\"))\n\n# Windows:\nrawProduction <- read.table(\"C:/Users/ogyg/Google Drive/Anadarko/data_raw/productionData.csv\", sep=\",\", header = TRUE)\nrawCompletion <- read.csv(\"C:/Users/ogyg/Google Drive/Anadarko/data_raw/completionData.csv\", header = TRUE, stringsAsFactors = FALSE)\ncompletionFlags <- read.table(\"C:/Users/ogyg/Google Drive/Anadarko/data_raw/completionFlags copy.csv\", header=FALSE, sep=\",\",\n                              colClasses = c(\"character\",\"logical\"))\n\n\nrawCompletion <- subset(rawCompletion, GeolResv_Rel == \"Rsv_1\") # Isolates Niobrara shale wells\n\nrawCompletion <- rawCompletion[,completionFlags$V2]\nrownames(rawCompletion) <- rawCompletion$Well.Name\n\ntoDropOil = c(139, 24, 23, 21, 131, 96, 61, 25, 15, 6)\n\nwells <- rownames(rawCompletion) #unique(rawCompletion$Well.Name)\n\noilRates <- vector('list', length(wells))\noilCum <- vector('list', length(wells))\ngasRates <- vector('list', length(wells))\ngasCum <- vector('list', length(wells))\noilTIP <- vector('list', length(wells))\n\nnames(oilRates) <- wells\n\ncommonKnots <- c(0, 50, 100, 200, 350, 610)\n\nOilFpcCum <- NULL\nGasFpcCum <- NULL\n\nfor(i in 1:188){\n\n  wellID <- i\n  oneWell <- subset(rawProduction, WELL_ID == wells[wellID])\n\n  # Pre Processing:\n  oneWell <- subset(oneWell, GROSS_OIL_BBLS > 1)\n  oilPeak <- which.max(oneWell$GROSS_OIL_BBLS)\n\n  if(i==6 | i==7 | i==19 | i==61 | i==62 | i==109 | i==124 | i==135 | i==157 | i==158 | i==161 | i==165 | i==73 | i==4) {\n    oilPeak = oilPeak + 1\n  }\n\n  if(i==20) {oneWell <- oneWell[1:620,]}\n  if(i==43){oneWell <- oneWell[1:500,]}\n  if(i==48){oilPeak = 95}\n  if(i==76){oneWell <- oneWell[1:580,]}\n  if(i==92){oneWell <- oneWell[1:490,]}\n  if(i==112){oneWell <- oneWell[1:500,]}\n  if(i==124){oneWell <- oneWell[1:300,]}\n  if(i==1){oilPeak <- oilPeak + 12}\n  if(i==109){oilPeak <- oilPeak + 11}\n  if(i==133){oilPeak <- oilPeak + 1}\n  if(i==135){oilPeak <- oilPeak + 16}\n  if(i==157){oilPeak <- oilPeak + 10}\n  if(i==165){oilPeak = oilPeak + 26}\n  if(i==173){oilPeak = oilPeak + 27}\n\n  oneWell <- oneWell[oilPeak:nrow(oneWell),]\n\n  oneWell$TIP <- cumsum((24 - oneWell$TOTAL_DWNT_HRS) /24)\n\n  if(max(oneWell$TIP) >= 610 & !(i %in% toDropOil)){\n    if(max(oneWell$TIP) > 610){\n      knots = c(commonKnots,max(oneWell$TIP))\n    } else {\n      knots = commonKnots\n    }\n\n    basis600 <- create.bspline.basis(c(0,max(knots)), length(knots)+2, 4, breaks = knots)\n    oilCum.fd  <- smooth.basis(oneWell$TIP, cumsum(oneWell$GROSS_OIL_BBLS), fdPar(basis600, lambda = 10))\n    OilFpcCum <- rbind(OilFpcCum, t(eval.fd(1:600, oilCum.fd$fd)))\n    gasCum.fd  <- smooth.basis(oneWell$TIP, cumsum(oneWell$GROSS_GAS_MCF), fdPar(basis600, lambda = 10))\n    GasFpcCum <- rbind(GasFpcCum, t(eval.fd(1:600, gasCum.fd$fd)))\n  }\n\n  oilRates[[i]] <- oneWell$GROSS_OIL_BBLS\n  oilCum[[i]]   <- cumsum(oneWell$GROSS_OIL_BBLS)\n  oilTIP[[i]]   <- oneWell$TIP\n  gasRates[[i]] <- oneWell$GROSS_GAS_MCF\n  gasCum[[i]]   <- cumsum(oneWell$GROSS_GAS_MSCF)\n\n}\n\nbasis <- create.bspline.basis(c(0,max(commonKnots)), length(commonKnots)+2, 4, breaks = commonKnots)\nallOilCum <- smooth.basis(1:600, t(OilFpcCum), fdPar(basis, 2, lambda = 100))\nallGasCum <- smooth.basis(1:600, t(GasFpcCum), fdPar(basis, 2, lambda = 100))\n\nallOilCum.fpc <- pca.fd(allOilCum$fd,2)\nallOilCum.vrmx <- varmx.pca.fd(allOilCum.fpc)\n\nallGasCum.fpc <- pca.fd(allGasCum$fd,2)\nallGasCum.vrmx <- varmx.pca.fd(allGasCum.fpc)\n\npar(mfrow=c(2,2))\nplot(allOilCum.fpc)\nplot(allOilCum.vrmx)\n\npar(mfrow=c(2,2))\nplot(allGasCum.fpc)\nplot(allGasCum.vrmx)\n\nmatplot(eval.fd(0:600, allOilCum.fpc$harmonics), type=\"l\")\nmatplot(eval.fd(0:600, allGasCum.fpc$harmonics), type=\"l\")\n\n\noilCumSmooth <- NULL\ngasCumSmooth <- NULL\n\nfor(i in 1:188){\n  TIP <- oilTIP[[i]]\n  OIL <- oilCum[[i]]\n  GAS <- cumsum(gasRates[[i]])\n  OIL <- OIL[is.finite(TIP)]\n  GAS <- GAS[is.finite(TIP)]\n  TIP <- TIP[is.finite(TIP)]\n  if(max(TIP) > 600){\n    OIL <- OIL[TIP < 601]\n    GAS <- GAS[TIP < 601]\n    TIP <- TIP[TIP < 601]\n  }\n  # OIL:\n  FPCS <- eval.fd(TIP, allOilCum.fpc$harmonics)[,1:2]\n  MEAN <- eval.fd(TIP,allOilCum.fpc$meanfd)\n  OIL <- OIL - MEAN\n  regXI <- lm(OIL~FPCS -1)\n  MEAN <- eval.fd(1:600,allOilCum.fpc$meanfd)\n  FPCS <- eval.fd(1:600, allOilCum.fpc$harmonics)\n  oilTemp <- MEAN + FPCS[,1:2] %*% coef(regXI)\n  oilCumSmooth <- rbind(oilCumSmooth, t(oilTemp))\n\n  # GAS:\n  FPCS <- eval.fd(TIP, allGasCum.fpc$harmonics)[,1:2]\n  MEAN <- eval.fd(TIP,allGasCum.fpc$meanfd)\n  GAS <- GAS - MEAN\n  regXI <- lm(GAS~FPCS -1)\n  MEAN <- eval.fd(1:600,allGasCum.fpc$meanfd)\n  FPCS <- eval.fd(1:600, allGasCum.fpc$harmonics)\n  gasTemp <- MEAN + FPCS[,1:2] %*% coef(regXI)\n  gasCumSmooth <- rbind(gasCumSmooth, t(gasTemp))\n\n}\n\n# Plot oil for control\npar(mfrow=c(4,3))\npar(mar=c(4,4,1,1)+0.1)\nfor(i in 1:188){\n  plot(oilTIP[[i]], oilCum[[i]], xlim=c(1,700), ylim=c(0,150000),xlab=\"Time\",ylab=\"Oil Rate (stb/day)\")\n  lines(1:600,oilCumSmooth[i,], col=\"red\", lwd=3)\n}\n\n# Plot gas for control\npar(mfrow=c(4,3))\npar(mar=c(4,4,1,1)+0.1)\nfor(i in 1:188){\n  plot(oilTIP[[i]], cumsum(gasRates[[i]]), xlim=c(1,700),xlab=\"Time\",ylab=\"GAs Rate (MSCF/day)\")\n  lines(1:600,gasCumSmooth[i,], col=\"red\", lwd=3)\n}\n\ncommonKnots <- c(0, 50, 100, 200, 350, 610)\n\n# commonKnots <- seq(1,610,length.out=8)\nbasis <- create.bspline.basis(c(0,max(commonKnots)), length(commonKnots)+2, 4, breaks = commonKnots)\nallCumOilFinal <- smooth.basis(1:600, t(oilCumSmooth), fdPar(basis,2, lambda = 100))\nallCumGasFinal <- smooth.basis(1:600, t(gasCumSmooth), fdPar(basis,2, lambda = 1000))\n\ncumulativeOilFinal <- eval.fd(1:600,allCumOilFinal$fd)\ncumulativeGasFinal <- eval.fd(1:600,allCumGasFinal$fd)\n\noilRatesFinal <- eval.fd(1:600,allCumOilFinal$fd,1)\nmatplot(oilRatesFinal, type=\"l\", lty=1, xlab=\"Time (days)\", ylab=\"Oil Rate (stb/day)\")\n\ngasRatesFinal <- eval.fd(1:600,allCumGasFinal$fd,1)\nmatplot(gasRatesFinal, type=\"l\", lty=1, xlab=\"Time (days)\", ylab=\"Oil Rate (stb/day)\")\n\n\n# To save for vignette:\n# WELL_PARAMETERS <- rawCompletion\n# rownames(WELL_PARAMETERS) <- paste(\"Well_\", 1:nrow(rawCompletion), sep=\"\")\n# WELL_PARAMETERS$Well.Name <- rownames(WELL_PARAMETERS)\n# OilRates <- oilRatesFinal\n# GasRates <- gasRatesFinal\n# rm(list=setdiff(ls(), c(\"WELL_PARAMETERS\",\"OilRates\",\"GasRates\")))\n# save.image(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/CleanData.RData\")\n\nOilRatesFd <- smooth.basis(1:600, oilRatesFinal, fdPar(basis, 2, lambda = 1))\nOilRatesFd.pca <- pca.fd(OilRatesFd$fd, 2)\nOilRatesFd.vrmx <- varmx.pca.fd(OilRatesFd.pca)\n\nGasRatesFd <- smooth.basis(1:600, gasRatesFinal, fdPar(basis, 2, lambda = 1))\nGasRatesFd.pca <- pca.fd(GasRatesFd$fd, 2)\nGasRatesFd.vrmx <- varmx.pca.fd(GasRatesFd.pca)\n\npar(mfrow=c(2,2))\nplot(OilRatesFd.pca)\nplot(OilRatesFd.vrmx)\n\npar(mfrow=c(2,2))\nplot(GasRatesFd.pca)\nplot(GasRatesFd.vrmx)\n\noil.MEAN <- eval.fd(1:600, OilRatesFd.pca$meanfd)\noil.FPCS <- eval.fd(1:600, OilRatesFd.pca$harmonics)\noil.FPCS.vrmx <- eval.fd(1:600, OilRatesFd.vrmx$harmonics)\n\ngas.MEAN <- eval.fd(1:600, GasRatesFd.pca$meanfd)\ngas.FPCS <- eval.fd(1:600, GasRatesFd.pca$harmonics)\ngas.FPCS.vrmx <- eval.fd(1:600, GasRatesFd.vrmx$harmonics)\n\n# png(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Covariates/img/fpcsRfpcs.png\",\n#     units=\"in\", res=400, width=8, height = 7.5)\npar(mfrow=c(2,2), mar=c(4,4,3,1)+0.1)\nfor(i in 1:2){\n  curves <- cbind(oil.MEAN,oil.MEAN + sqrt(OilRatesFd.pca$values[i])*oil.FPCS[,i],oil.MEAN - sqrt(OilRatesFd.pca$values[i])*oil.FPCS[,i])\n  matplot(curves, type=c(\"l\",\"p\",\"p\"), col=c(\"black\",\"red\",\"blue\"), pch=c(1,\"+\",\"-\"), xlab=NA, ylab=NA)\n  mtext(\"Time (days)\", 1,2); mtext(\"Oil Rate (stb/day)\",2,2)\n  mtext(paste(\"FPC-\",i,\", FVE=\",round(OilRatesFd.pca$values[i]/sum(OilRatesFd.pca$values),2), sep=\"\"),3,1)\n}\n\nrFVE <- apply(OilRatesFd.vrmx$scores,2,sd)\nrFVE <- rFVE/sum(sqrt(OilRatesFd.pca$values))\n\nfor(i in 1:2){\n  curves <- cbind(oil.MEAN,oil.MEAN + sd(OilRatesFd.vrmx$scores[,i])*oil.FPCS.vrmx[,i],oil.MEAN - sd(OilRatesFd.vrmx$scores[,i])*oil.FPCS.vrmx[,i])\n  matplot(curves, type=c(\"l\",\"p\",\"p\"), col=c(\"black\",\"red\",\"blue\"), pch=c(1,\"+\",\"-\"), xlab=NA, ylab=NA)\n  mtext(\"Time (days)\", 1,2); mtext(\"Oil Rate (stb/day)\",2,2)\n  mtext(paste(\"rFPC-\",i,\", FVE=\",round(rFVE[i],2), sep=\"\"),3,1)\n}\n# dev.off()\n\npar(mfrow=c(2,2), mar=c(4,4,3,1)+0.1)\nfor(i in 1:2){\n  curves <- cbind(gas.MEAN,gas.MEAN + sqrt(GasRatesFd.pca$values[i])*gas.FPCS[,i],gas.MEAN - sqrt(GasRatesFd.pca$values[i])*gas.FPCS[,i])\n  matplot(curves, type=c(\"l\",\"p\",\"p\"), col=c(\"black\",\"red\",\"blue\"), pch=c(1,\"+\",\"-\"), xlab=NA, ylab=NA)\n  mtext(\"Time (days)\", 1,2); mtext(\"gas Rate (mscf/day)\",2,2)\n  mtext(paste(\"FPC-\",i,\", FVE=\",round(GasRatesFd.pca$values[i]/sum(GasRatesFd.pca$values),2), sep=\"\"),3,1)\n}\n\nrFVE <- apply(GasRatesFd.vrmx$scores,2,sd)\nrFVE <- rFVE/sum(sqrt(GasRatesFd.pca$values))\n\nfor(i in 1:2){\n  curves <- cbind(gas.MEAN,gas.MEAN + sd(GasRatesFd.vrmx$scores[,i])*gas.FPCS.vrmx[,i],gas.MEAN - sd(GasRatesFd.vrmx$scores[,i])*gas.FPCS.vrmx[,i])\n  matplot(curves, type=c(\"l\",\"p\",\"p\"), col=c(\"black\",\"red\",\"blue\"), pch=c(1,\"+\",\"-\"), xlab=NA, ylab=NA)\n  mtext(\"Time (days)\", 1,2); mtext(\"gas Rate (mscf/day)\",2,2)\n  mtext(paste(\"rFPC-\",i,\", FVE=\",round(rFVE[i],2), sep=\"\"),3,1)\n}\n\npng(\"./img/Functional_data.png\", units=\"in\", res=400, width=8, height = 3.5)\npar(mfrow=c(1,2), mar=c(4,4,1,1)+0.1)\nmatplot(oilRatesFinal, type=\"l\", col=\"blue\", xlab=\"Time (days)\", ylab=\"Oil Rate (stb/day)\")\nmatplot(gasRatesFinal, type=\"l\", col=\"red\", xlab=\"Time (days)\", ylab=\"Gas Rate (MSCF/day)\")\ndev.off()\n\nlibrary(functInterp)\n# COVARIATES <- rawCompletion[,c(4:5,6:7,15:19,26)] # Study 1\nCOVARIATES <- rawCompletion[,c(4:7,16,19,20,23,24,25:27,32)]\nXY <- COVARIATES[,1:2]\n# bring to positive scale:\nXY[,1] <- XY[,1] - min(XY[,1])\nXY[,2] <- XY[,2] - min(XY[,2])\nmaxXY <- max(XY)\nXY <- XY / max(XY)\n# 88559 is the max\nCOVARIATES <- as.data.frame(apply(COVARIATES, 2, scale))\nCOVARIATES[,1:2] <- XY\n\nLMdata <- cbind(COVARIATES, OilRatesFd.vrmx$scores)\nnc <- ncol(COVARIATES)\ncolnames(LMdata)[(nc+1):(nc+2)] <- c(\"Pc1\",\"Pc2\")\n\nlinModPC1 <- lm(Pc1~.-Pc2, LMdata)\nlinModPC2 <- lm(Pc2~.-Pc1, LMdata)\nsummary(linModPC1)\nsummary(linModPC2)\n\nLMdata <- cbind(COVARIATES, GasRatesFd.vrmx$scores)\nnc <- ncol(COVARIATES)\ncolnames(LMdata)[(nc+1):(nc+2)] <- c(\"Pc1\",\"Pc2\")\n\nlinModPC1 <- lm(Pc1~.-Pc2, LMdata)\nlinModPC2 <- lm(Pc2~.-Pc1, LMdata)\nsummary(linModPC1)\nsummary(linModPC2)\n\n# DATA MINING:------------------------------------------------------------------\ntrain <- 1:188\nfsTrace <- fstat(NULL, \"Oil\", COVARIATES[train,], as.data.frame(oilRatesFinal[,train]))\nfsTrace <- fstat(fsTrace, \"Gas\", COVARIATES[train,], as.data.frame(gasRatesFinal[,train]))\nfsTrace <- estimateDrift(\"~.\", fsTrace)\nfsTrace <- fvariogram(\"~GeolX_Rel + GeolY_Rel\", fsTrace, Nlags=100, LagMax = 0.7, ArgStep = 1,\n                      useResidual = TRUE, crossMode = \"conventional\")\nplotVariogram(fsTrace,npSize = TRUE)\nfsTrace <- fitVariograms(fsTrace, vgm(1, \"Mat\", 0.17, 250000, kappa=0.4),\n                         fitRanges = FALSE, forceNugget = FALSE)\n\nfsTrace$model$omni$Oil$psill <- fsTrace$model$omni$Oil$psill/sum(fsTrace$model$omni$Oil$psill)\nfsTrace$model$omni$Gas$psill <- fsTrace$model$omni$Gas$psill/sum(fsTrace$model$omni$Gas$psill)\nfsTrace$model$omni$Oil.Gas$psill <- fsTrace$model$omni$Oil.Gas$psill/sum(fsTrace$model$omni$Oil.Gas$psill)\nfsTrace <- addCovariance(fsTrace)\nfsTrace <- estimateDrift(\"~.\", fsTrace, .type = \"GLS\")\nfsTrace <- fvariogram(\"~GeolX_Rel + GeolY_Rel\", fsTrace, Nlags=100, LagMax = 0.7, ArgStep = 1,\n                      useResidual = TRUE, crossMode = \"conventional\")\nplotVariogram(fsTrace)\nfsTrace <- fitVariograms(fsTrace, vgm(1, \"Mat\", 0.17, 250000, kappa=0.4),\n                         fitRanges = FALSE, forceNugget = FALSE)\n\n# Projection analysis:\nfsFPCA <- fstat(NULL,\"oil-pc1\", COVARIATES[train,], as.data.frame(OilRatesFd.vrmx$scores[,1]), scalar = TRUE)\nfsFPCA <- fstat(fsFPCA,\"oil-pc2\", COVARIATES[train,], as.data.frame(OilRatesFd.vrmx$scores[,2]), scalar = TRUE)\nfsFPCA <- fstat(fsFPCA,\"gas-pc1\", COVARIATES[train,], as.data.frame(GasRatesFd.vrmx$scores[,1]), scalar = TRUE)\nfsFPCA <- fstat(fsFPCA,\"gas-pc2\", COVARIATES[train,], as.data.frame(GasRatesFd.vrmx$scores[,2]), scalar = TRUE)\nfsFPCA <- estimateDrift(\"~.\", fsFPCA)\nfsFPCA <- fvariogram(\"~GeolX_Rel + GeolY_Rel\", fsFPCA, Nlags=100, LagMax = 0.7, ArgStep = 1,\n                      useResidual = TRUE, crossMode = \"conventional\")\nplotVariogram(fsFPCA)\nfsFPCA <- fitVariograms(fsFPCA, vgm(1, \"Mat\", 0.17, 250000, kappa=0.4),\n                         fitRanges = FALSE, forceNugget = FALSE)\nfsFPCA <- addCovariance(fsFPCA)\nfsFPCA <- estimateDrift(\"~.\", fsFPCA, .type = \"GLS\")\nfsFPCA <- fvariogram(\"~GeolX_Rel + GeolY_Rel\", fsFPCA, Nlags=100, LagMax = 0.7, ArgStep = 1,\n                     useResidual = TRUE, crossMode = \"conventional\")\nplotVariogram(fsFPCA)\nfsFPCA <- fitVariograms(fsFPCA, vgm(1, \"Mat\", 0.17, 250000, kappa=0.4),\n                        fitRanges = FALSE, forceNugget = FALSE)\n\n\nSCORES <- cbind(OilRatesFd.vrmx$scores,GasRatesFd.vrmx$scores )\n\nlibrary(fTree)\nlibrary(DGSA)\nD.oil <- as.matrix(dist(t(oilRatesFinal)))\nD.gas <- as.matrix(dist(t(gasRatesFinal)))\nD.oil <- D.oil/max(D.oil)\nD.gas <- D.gas/max(D.gas)\n# D.oil <- scale(D.oil)\n# D.gas <- scale(D.gas)\n\n.distance <- cmdscale(D.oil + D.gas)\n.clustering <- kmeans(.distance, 2)\nplot(.distance)\npoints(.distance[.clustering$cluster==1,], col=\"red\", pch=19)\npoints(.distance[.clustering$cluster==2,], col=\"blue\", pch=19)\n\npng(\"./img/DGSA_Scatters.png\", units=\"in\", res=400, width=9, height = 10)\nprint(plotDGSAscatter(rawCompletion[,-c(1,15,17,18,19,21,30,33)],.distance,.ggReturn = TRUE) + theme(legend.position = \"top\"))\ndev.off()\n\npng(\"./img/DGSA_CDFS.png\", units=\"in\", res=400, width=9, height = 10)\nprint(plotCDFS(.clustering$cluster,rawCompletion[,-c(1,15,17,18,19,21,30,33)], .code=\"all*\"))\ndev.off()\n\nprint(plotCDFS(.clustering$cluster,.X = rawCompletion[,-c(1,15,17,18,19,21,30,33)],\n               .code=\"all*\", .ggReturn = TRUE) + theme(legend.position = \"top\",axis.text.x=element_text(angle=90, hjust=1)))\nsensitivity <- dgsa(.clustering$cluster, .X = rawCompletion[,-c(1,15,17,18,19,21,30,33)],.interactions = FALSE)\n\npng(\"./img/mv_DGSA_sensitivity.png\", units=\"in\", res=400, width=5, height = 6)\nprint(plotParetoDGSA(sensitivity, .ggReturn = TRUE) + theme(legend.position = \"top\"))\ndev.off()\n\nmvTree.dist         <- ftree(.X = rawCompletion[train,-c(1,15,17,18,19,21,30,33)], .Y = oilRatesFinal[,train],\n                               .D = D.oil+D.gas, tree.type = \"single\", cost.type = \"rdist\")\nmvTree.dist.bag     <- ftree(.X = rawCompletion[train,-c(1,15,17,18,19,21,30,33)], .Y = oilRatesFinal[,train],\n                         .D = D.oil[train,train]+D.gas[train,train], tree.type = \"bagging\", cost.type = \"rdist\", nBoot = 200,\n                         .minSplit = 4, .minBucket = 2)\noilTree.dist         <- ftree(.X = rawCompletion[train,-c(1,15,17,18,19,21,30,33)], .Y = oilRatesFinal[,train],\n                             .D = D.oil, tree.type = \"single\", cost.type = \"rdist\")\noilTree.dist.bag     <- ftree(.X = rawCompletion[train,-c(1,15,17,18,19,21,30,33)], .Y = oilRatesFinal[,train],\n                             .D = D.oil, tree.type = \"bagging\", cost.type = \"rdist\", nBoot = 200,\n                             .minSplit = 4, .minBucket = 2)\ngasTree.dist         <- ftree(.X = rawCompletion[train,-c(1,15,17,18,19,21,30,33)], .Y = gasRatesFinal[,train],\n                              .D = D.gas, tree.type = \"single\", cost.type = \"rdist\")\ngasTree.dist.bag     <- ftree(.X = rawCompletion[train,-c(1,15,17,18,19,21,30,33)], .Y = gasRatesFinal[,train],\n                              .D = D.gas, tree.type = \"bagging\", cost.type = \"rdist\", nBoot = 200,\n                              .minSplit = 4, .minBucket = 2)\n\n# Plot of trees:\npng(\"./img/mv_Tree.png\", units=\"in\", res=400, width=10, height = 8)\nplotFtree(mvTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3.6, .node = \"0\", .round=2)\ndev.off()\n\nplotFtree(oilTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3, .node = \"0\",.round=2)\nplotFtree(gasTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3, .node = \"0\",.round=2)\n\n\n\ngetIndices <- function(.NODE, .position){\n\n  if(nchar(.position) == 1){\n    if(.NODE$isLeaf == 1){\n      return(list(centerInd = .NODE$indices + 1))\n    } else {\n      return(list(leftInd  = .NODE$left$indices + 1,\n                  rightInd = .NODE$right$indices + 1))\n    }\n  } else {\n\n    if(substr(.position, 2, 2) == \"r\"){\n      getIndices(.NODE$right, substr(.position,2, nchar(.position)))\n    } else {\n      getIndices(.NODE$left, substr(.position,2, nchar(.position)))\n    }\n  }\n}\n\n.data <- oilRatesFinal\n.indices <- getIndices(mvTree.dist$trees[[1]], node)\n\nggpl <- function(.data, .indices){\n  .data <- as.data.frame(.data)\n  colnames(.data) <- 1:ncol(.data)\n  .data$Time <- 1:nrow(.data)\n  .data <- melt(.data, id=\"Time\")\n  .data$colour <- 'black'\n  .data$colour[.data$variable %in% .indices$leftInd] <- \"red\"\n  .data$colour[.data$variable %in% .indices$rightInd] <- \"blue\"\n  .data$colour <- factor(.data$colour, levels=c(\"black\",\"red\",\"blue\"))\n  .order <- c(.data$variable[.data$colour==\"black\"], .data$variable[.data$colour==\"red\"],.data$variable[.data$colour==\"blue\"])\n  .data$variable <- factor(.data$variable, levels = .order)\n  .data$width <- 1.5\n  .data$width[.data$colour==\"black\"] <- 1\n  .data$width <- factor(.data$width)\n  pl <- ggplot(.data) + geom_line(aes(x=Time, y=value, group=variable, colour=colour, size=width), alpha=0.6) +\n    scale_colour_manual(values=c(\"black\",\"red\",\"blue\")) + guides(colour=\"none\", size=\"none\") +\n    scale_size_manual(values=c(1,1.2))\n  return(pl)\n}\n\na <- 1:10\na %in% 1:5\n\n# Split Dive:\nnode = \"0\"\npng(paste(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/img/splitting_\", node,\".png\", sep=\"\"),\n          units=\"in\", res=300, width = 12, height=6)\npTree <- plotFtree(mvTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3.6, .node = node, .round=2, .ggReturn = TRUE)\nindices <- getIndices(mvTree.dist$trees[[1]], node)\npOil <- ggpl(oilRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"STB/day\")\npGas <- ggpl(gasRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"MMSCF/day\")\nmultiPlot(pTree, pOil, pGas, cols=3, layout=matrix(c(1,1,1,1,2,3), 2, 3))\ndev.off()\n\nnode = \"0l\"\npng(paste(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/img/splitting_\", node,\".png\", sep=\"\"),\n    units=\"in\", res=300, width = 12, height=6)\npTree <- plotFtree(mvTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3.6, .node = node, .round=2, .ggReturn = TRUE)\nindices <- getIndices(mvTree.dist$trees[[1]], node)\npOil <- ggpl(oilRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"STB/day\")\npGas <- ggpl(gasRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"MMSCF/day\")\nmultiPlot(pTree, pOil, pGas, cols=3, layout=matrix(c(1,1,1,1,2,3), 2, 3))\ndev.off()\n\nnode = \"0lr\"\npng(paste(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/img/splitting_\", node,\".png\", sep=\"\"),\n    units=\"in\", res=300, width = 12, height=6)\npTree <- plotFtree(mvTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3.6, .node = node, .round=2, .ggReturn = TRUE)\nindices <- getIndices(mvTree.dist$trees[[1]], node)\npOil <- ggpl(oilRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"STB/day\")\npGas <- ggpl(gasRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"MMSCF/day\")\nmultiPlot(pTree, pOil, pGas, cols=3, layout=matrix(c(1,1,1,1,2,3), 2, 3))\ndev.off()\n\nnode = \"0lrr\"\npng(paste(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/img/splitting_\", node,\".png\", sep=\"\"),\n    units=\"in\", res=300, width = 12, height=6)\npTree <- plotFtree(mvTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3.6, .node = node, .round=2, .ggReturn = TRUE)\nindices <- getIndices(mvTree.dist$trees[[1]], node)\npOil <- ggpl(oilRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"STB/day\")\npGas <- ggpl(gasRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"MMSCF/day\")\nmultiPlot(pTree, pOil, pGas, cols=3, layout=matrix(c(1,1,1,1,2,3), 2, 3))\ndev.off()\n\nnode = \"0ll\"\npng(paste(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/img/splitting_\", node,\".png\", sep=\"\"),\n    units=\"in\", res=300, width = 12, height=6)\npTree <- plotFtree(mvTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3.6, .node = node, .round=2, .ggReturn = TRUE)\nindices <- getIndices(mvTree.dist$trees[[1]], node)\npOil <- ggpl(oilRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"STB/day\")\npGas <- ggpl(gasRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"MMSCF/day\")\nmultiPlot(pTree, pOil, pGas, cols=3, layout=matrix(c(1,1,1,1,2,3), 2, 3))\ndev.off()\n\nnode = \"0lll\"\npng(paste(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/img/splitting_\", node,\".png\", sep=\"\"),\n    units=\"in\", res=300, width = 12, height=6)\npTree <- plotFtree(mvTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3.6, .node = node, .round=2, .ggReturn = TRUE)\nindices <- getIndices(mvTree.dist$trees[[1]], node)\npOil <- ggpl(oilRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"STB/day\")\npGas <- ggpl(gasRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"MMSCF/day\")\nmultiPlot(pTree, pOil, pGas, cols=3, layout=matrix(c(1,1,1,1,2,3), 2, 3))\ndev.off()\n\nnode = \"0lllr\"\npng(paste(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/img/splitting_\", node,\".png\", sep=\"\"),\n    units=\"in\", res=300, width = 12, height=6)\npTree <- plotFtree(mvTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3.6, .node = node, .round=2, .ggReturn = TRUE)\nindices <- getIndices(mvTree.dist$trees[[1]], node)\npOil <- ggpl(oilRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"STB/day\")\npGas <- ggpl(gasRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"MMSCF/day\")\nmultiPlot(pTree, pOil, pGas, cols=3, layout=matrix(c(1,1,1,1,2,3), 2, 3))\ndev.off()\n\nnode = \"0lllrr\"\npng(paste(\"~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/img/splitting_\", node,\".png\", sep=\"\"),\n    units=\"in\", res=300, width = 12, height=6)\npTree <- plotFtree(mvTree.dist, .horizontal = TRUE, .ylimLow = -1, .labSize = 3.6, .node = node, .round=2, .ggReturn = TRUE)\nindices <- getIndices(mvTree.dist$trees[[1]], node)\npOil <- ggpl(oilRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"STB/day\")\npGas <- ggpl(gasRatesFinal, indices) + xlab(\"Time (days)\") + ylab(\"MMSCF/day\")\nmultiPlot(pTree, pOil, pGas, cols=3, layout=matrix(c(1,1,1,1,2,3), 2, 3))\ndev.off()\n\n# Variable importance:\npng(\"./img/mv_Tree_sensitivity.png\", units=\"in\", res=400, width=5, height = 6)\nvarSensitivity(mvTree.dist.bag)\ndev.off()\nvarSensitivity(oilTree.dist.bag)\nvarSensitivity(gasTree.dist.bag)\n\n# geostatistical analysis\nmvTree.dist.bag$costType <- \"sse\"\n\noil.Residual <- as.matrix(\n  ldply(predictFtree(mvTree.dist.bag, as.data.frame(rawCompletion[train,-c(1,15,17,18,19,21,30,33)])),\n        function(x) {colMeans(x, na.rm = TRUE)}, .id = NULL)) - t(oilRatesFinal[,train])\n\nmvTree.dist.bag$functions <- gasRatesFinal[,train]\ngas.Residual <- as.matrix(\n  ldply(predictFtree(mvTree.dist.bag, as.data.frame(rawCompletion[train,-c(1,15,17,18,19,21,30,33)])),\n        function(x) {colMeans(x, na.rm = TRUE)}, .id = NULL)) - t(gasRatesFinal[,train])\n\nfTrace <- fstat(NULL, \"Oil\", rawCompletion[train,4:5], as.data.frame(t(oil.Residual)))\nfTrace <- fstat(fTrace, \"Gas\", rawCompletion[train,4:5], as.data.frame(t(gas.Residual)))\nfTrace <- fvariogram(\"~.\", fTrace, Nlags = 400, LagMax = 40000, ArgStep = 1, crossMode = \"NA\")\nplotVariogram(fTrace, npSize = FALSE)\nfTrace$model$omni$Gas <- vgm(1.5e+06,\"Sph\",20000, 2e+06)\nfTrace$model$omni$Oil <- vgm(1.4e+07, \"Sph\", 20000, 0)\n\npng(\"./img/Trace_variograms_data_analysis.png\", units=\"in\", res=400, width=8, height = 3.5)\nplotVariogram(fTrace, npSize = FALSE)\ndev.off()\n\n# Projection analysis:\noil.Residual.fd <- smooth.basis(1:600, t(oil.Residual), basis)\noil.Residual.fd.pca <- pca.fd(oil.Residual.fd$fd, 2)\nplot(oil.Residual.fd.pca)\n\ngas.Residual.fd <- smooth.basis(1:600, t(gas.Residual), basis)\ngas.Residual.fd.pca <- pca.fd(gas.Residual.fd$fd, 2)\nplot(gas.Residual.fd.pca)\n\nfsFPCA <- fstat(NULL,\"oil-pc1\", COVARIATES[train,], as.data.frame(oil.Residual.fd.pca$scores[,1]), scalar = TRUE)\nfsFPCA <- fstat(fsFPCA,\"oil-pc2\", COVARIATES[train,], as.data.frame(oil.Residual.fd.pca$scores[,2]), scalar = TRUE)\nfsFPCA <- fstat(fsFPCA,\"gas-pc1\", COVARIATES[train,], as.data.frame(gas.Residual.fd.pca$scores[,1]), scalar = TRUE)\nfsFPCA <- fstat(fsFPCA,\"gas-pc2\", COVARIATES[train,], as.data.frame(gas.Residual.fd.pca$scores[,2]), scalar = TRUE)\nfsFPCA <- estimateDrift(\"~.\", fsFPCA)\nfsFPCA <- fvariogram(\"~GeolX_Rel + GeolY_Rel\", fsFPCA, Nlags=100, LagMax = 0.7, ArgStep = 1,\n                     useResidual = TRUE, crossMode = \"conventional\")\nplotVariogram(fsFPCA)\nfsFPCA <- fitVariograms(fsFPCA, vgm(1, \"Mat\", 0.17, 250000, kappa=0.4),\n                        fitRanges = FALSE, forceNugget = FALSE)\nfsFPCA <- addCovariance(fsFPCA)\nfsFPCA <- estimateDrift(\"~.\", fsFPCA, .type = \"GLS\")\nfsFPCA <- fvariogram(\"~GeolX_Rel + GeolY_Rel\", fsFPCA, Nlags=100, LagMax = 0.7, ArgStep = 1,\n                     useResidual = TRUE, crossMode = \"conventional\")\nplotVariogram(fsFPCA)\nfsFPCA <- fitVariograms(fsFPCA, vgm(1, \"Mat\", 0.17, 250000, kappa=0.4),\n                        fitRanges = FALSE, forceNugget = FALSE)\n\n# Forecasting Study:\nset.seed(1)\ntrain <- sample(188,100,replace=FALSE)\nD <- D.oil+D.gas\n\nmvTree.dist.rf <- ftree(.X = rawCompletion[train,c(4:7,16,19,20,23,24,25:27,32)], .Y = oilRatesFinal[,train],\n                     .D = D[train,train], tree.type = \"randomforest\", cost.type = \"rdist\", nBoot = 1000,\n                     .minSplit = 4, .minBucket = 2)\nmvTree.dist.rf$costType <- \"sse\"\nmvTree.dist.rf.gas <- mvTree.dist.rf\nmvTree.dist.rf.gas$functions <- gasRatesFinal[,train]\n\noil.test <- predictFtree(mvTree.dist.rf, as.data.frame(rawCompletion[-train,c(4:7,16,19,20,23,24,25:27,32)]))\ngas.test <- predictFtree(mvTree.dist.rf.gas, as.data.frame(rawCompletion[-train,c(4:7,16,19,20,23,24,25:27,32)]))\n\noil.test.Mean <- Reduce(rbind, lapply(oil.test, function(x) colMeans(x)))\ngas.test.Mean <- Reduce(rbind, lapply(gas.test, function(x) colMeans(x)))\n\n\n# SSE computation:\noil.MEAN <- rowMeans(oilRatesFinal)\ngas.MEAN <- rowMeans(gasRatesFinal)\noil.SSE <- mean(apply(oilRatesFinal, 2, function(x) sum((x-oil.MEAN)^2)))\ngas.SSE <- mean(apply(gasRatesFinal, 2, function(x) sum((x-gas.MEAN)^2)))\n\nerror.OIL <- apply(t(oil.test.Mean) - oilRatesFinal[,-train],2, function(x) sum(x^2))/oil.SSE\nerror.GAS <- apply(t(gas.test.Mean) - gasRatesFinal[,-train],2, function(x) sum(x^2))/gas.SSE\n\nerrTable <- cbind(StatCompute(error.OIL, c(\"min\",\"mean\",\"median\",\"sd\",\"max\")),\n                  StatCompute(error.GAS, c(\"min\",\"mean\",\"median\",\"sd\",\"max\")))\ncolnames(errTable) <- c(\"Oil\", \"Gas\")\nround(t(errTable), 3)\n\ntest <- seq(1,188)[-train]\n\ntwoD <- cmdscale(dist(rbind(oil.test[[1]], oilRatesFinal[,-train][,1])))\nplot(twoD)\nlibrary(aplpack)\nbagplot(twoD)\npoints(twoD[1001,1],twoD[1001,2] , pch=19, col=\"black\", cex=3)\n\nB <- compute.bagplot(twoD)\n\noil.outlier <- rep(0,length(test))\nfor(i in 1:88){\n  twoD <- cmdscale(dist(rbind(oil.test[[i]], oilRatesFinal[,-train][,i])))\n  B <- compute.bagplot(twoD)\n  if(!is.null(B$pxy.outlier)){\n  for(j in 1:nrow(B$pxy.outlier)){\n    if(B$pxy.outlier[j,1] == twoD[1001,1] && B$pxy.outlier[j,2] == twoD[1001,2]){\n      oil.outlier[i] <- 1\n    }\n  }\n  } else {\n    oil.outlier[i] <- 1\n  }\n  print(i)\n}\n\ngas.outlier <- rep(0,length(test))\nfor(i in 1:88){\n  twoD <- cmdscale(dist(rbind(gas.test[[i]], gasRatesFinal[,-train][,i])))\n  B <- compute.bagplot(twoD)\n  if(!is.null(B$pxy.outlier)){\n    for(j in 1:nrow(B$pxy.outlier)){\n      if(B$pxy.outlier[j,1] == twoD[1001,1] && B$pxy.outlier[j,2] == twoD[1001,2]){\n        gas.outlier[i] <- 1\n      }\n    }\n  } else {\n    gas.outlier[i] <- 1\n  }\n  print(i)\n}\n\nerrTable <- t(errTable)\nerrTable <- cbind(errTable, c(88-sum(oil.outlier), 88-sum(gas.outlier)), 100*c(88-sum(oil.outlier), 88-sum(gas.outlier))/88)\ncolnames(errTable)[6:7] <- c(\"in 95 CB\", \"perc. in 95 CB\")\n\n# Residual.oil <- as.matrix(\n#   ldply(predictFtree(mvTree.dist.rf, as.data.frame(rawCompletion[train,-c(1,15,17,18,19,21,30,33)])),\n#         function(x) {colMeans(x, na.rm = TRUE)}, .id = NULL)) - t(oilRatesFinal[,train])\n# Residual.gas <- as.matrix(\n#   ldply(predictFtree(mvTree.dist.rf.gas, as.data.frame(rawCompletion[train,-c(1,15,17,18,19,21,30,33)])),\n#         function(x) {colMeans(x, na.rm = TRUE)}, .id = NULL)) - t(gasRatesFinal[,train])\n#\n# # Common variograms:\n# fTrace.oil <- fstat(NULL, \"Oil\", rawCompletion[train,4:5], as.data.frame(t(Residual.oil)))\n# fTrace.oil <- fvariogram(\"~.\", fTrace.oil, Nlags = 300, LagMax = 40000, ArgStep = 1)\n# plotVariogram(fTrace.oil)\n# fTrace.oil <- fitVariograms(fTrace.oil, vgm(2e+05, \"Sph\", 20000, 0), fitRanges=FALSE)\n# fTrace.oil <- addCovariance(fTrace.oil)\n# Residual.oil.forecast <- predictFstat(fTrace.oil, .newCoordinates = rawCompletion[-train,4:5], .type = \"OK\", .what=\"Oil\")\n#\n# oil.test.Mean <- Reduce(rbind, lapply(oil.test, function(x) colMeans(x)))\n# matplot(oilRatesFinal[,-train], type=\"l\", col=\"red\")\n# matplot(t(oil.test.Mean) + Residual.oil.forecast$Forecast, type=\"l\", col=\"blue\", add=TRUE)\n#\n# fTrace.gas <- fstat(NULL, \"Gas\", rawCompletion[train,4:5], as.data.frame(t(Residual.gas)))\n# fTrace.gas <- fvariogram(\"~.\", fTrace.gas, Nlags = 200, LagMax = 60000, ArgStep = 1)\n# plotVariogram(fTrace.gas)\n# fTrace.gas <- fitVariograms(fTrace.gas, vgm(2e+05, \"Sph\", 20000, 0), fitRanges=FALSE)\n# fTrace.gas <- addCovariance(fTrace.gas)\n# Residual.gas.forecast <- predictFstat(fTrace.gas, .newCoordinates = rawCompletion[-train,4:5], .type = \"OK\", .what=\"Gas\")\n#\n# gas.test.Mean <- Reduce(rbind, lapply(gas.test, function(x) colMeans(x)))\n# matplot(gasRatesFinal[,-train], type=\"l\", col=\"red\")\n# matplot(t(gas.test.Mean) + Residual.gas.forecast$Forecast, type=\"l\", col=\"blue\", add=TRUE)\n\n\n# Plots of forecasts:-----------------------------------------------------------\n\n\npng(filename=\"./img/mv_rf_forecasts_6.png\",\n    units=\"in\", width=5.5, height = 6.5, res=300)\n\nlayout(matrix(c(1:8,9,9), 5, 2, byrow = TRUE),\n       widths=c(1,1), heights=c(1,1,1,1,0.3))\nmarginsLeft <- c(4, 4, 1, 1) + 0.1\npar(mar=marginsLeft)\n\nset.seed(0)\nindices <- sample(length(test),4)\nfor(i in indices){\n  plot(0,0, pch=19, col=\"white\", xlab=\"Time(days)\", ylab=\"STB/day\",ylim=c(0,600), xlim=c(0,600))\n  grid(nx=5, ny=7)\n  matplot(t(oil.test[[i]]), type = \"l\",\n          col=\"green\", add=TRUE)\n  points(oilRates[[test[i]]][1:600], col=\"black\")\n  lines(oilRatesFinal[,-train][,i], col=\"blue\", lwd=4)\n\n  plot(0,0, pch=19, col=\"white\",  xlab=\"Time(days)\", ylab=\"MSCF/day\" ,ylim=c(0,1700), xlim=c(0,600))\n  grid(nx=5, ny=7)\n  matplot(t(gas.test[[i]]), type = \"l\",\n          col=\"red\",add=TRUE)\n  points(gasRates[[test[i]]][1:600], col=\"black\")\n  lines(gasRatesFinal[,-train][,i], col=\"blue\", lwd=4)\n\n}\n\npar(mar=c(0, 0, 0, 0))\nplot(1,1, type=\"n\", axes=FALSE, xlab=\"\", ylab=\"\")\nlegend(\"center\", inset=2, c(\"Observed\", \"Smoothed\", \"mv FRF Forecast - Oil\", \"mv FRF Forecast - Gas\"),\n       col=c(\"black\", \"blue\", \"green\", \"red\"),\n       lty=c(NA,1,1,1), lwd = c(NA,4,1,1), pch=c(1,NA,NA,NA), horiz = FALSE, ncol = 2)\ndev.off()\n\n\npng(filename=\"./img/mv_rf_forecasts_7.png\",\n    units=\"in\", width=5.5, height = 6.5, res=300)\n\nlayout(matrix(c(1:8,9,9), 5, 2, byrow = TRUE),\n       widths=c(1,1), heights=c(1,1,1,1,0.3))\nmarginsLeft <- c(4, 4, 1, 1) + 0.1\npar(mar=marginsLeft)\n\nset.seed(2)\nindices <- sample(length(test),4)\nfor(i in indices){\n  plot(0,0, pch=19, col=\"white\", xlab=\"Time(days)\", ylab=\"STB/day\",ylim=c(0,600), xlim=c(0,600))\n  grid(nx=5, ny=7)\n  matplot(t(oil.test[[i]]), type = \"l\",\n          col=\"green\", add=TRUE)\n  points(oilRates[[test[i]]][1:600], col=\"black\")\n  lines(oilRatesFinal[,-train][,i], col=\"blue\", lwd=4)\n\n  plot(0,0, pch=19, col=\"white\",  xlab=\"Time(days)\", ylab=\"MSCF/day\" ,ylim=c(0,1700), xlim=c(0,600))\n  grid(nx=5, ny=7)\n  matplot(t(gas.test[[i]]), type = \"l\",\n          col=\"red\",add=TRUE)\n  points(gasRates[[test[i]]][1:600], col=\"black\")\n  lines(gasRatesFinal[,-train][,i], col=\"blue\", lwd=4)\n\n}\n\npar(mar=c(0, 0, 0, 0))\nplot(1,1, type=\"n\", axes=FALSE, xlab=\"\", ylab=\"\")\nlegend(\"center\", inset=2, c(\"Observed\", \"Smoothed\", \"mv FRF Forecast - Oil\", \"mv FRF Forecast - Gas\"),\n       col=c(\"black\", \"blue\", \"green\", \"red\"),\n       lty=c(NA,1,1,1), lwd = c(NA,4,1,1), pch=c(1,NA,NA,NA), horiz = FALSE, ncol = 2)\ndev.off()\n\n\n# SSE Tables computed between the mean of the forecasts and smoothed version of the true data.\n\n\n# Trace Forecasting:\nfTrace.oil <- fstat(NULL, \"Oil\", COVARIATES[train,], as.data.frame(oilRatesFinal[,train]))\nfTrace.oil <- estimateDrift(\"~.\", fTrace.oil)\nfTrace.oil <- fvariogram(\"~GeolX_Rel+GeolY_Rel\", fTrace.oil, Nlags = 400, LagMax = 1.5, ArgStep = 1)\nplotVariogram(fTrace.oil)\nfTrace.oil <- fitVariograms(fTrace.oil, vgm(2e+05, \"Sph\", 0.2, 0), fitRanges=FALSE)\nfTrace.oil <- addCovariance(fTrace.oil)\nfTrace.oil <- estimateDrift(\"~.\", fTrace.oil, .type = \"GLS\")\nfTrace.oil <- fvariogram(\"~GeolX_Rel+GeolY_Rel\", fTrace.oil, Nlags = 400, LagMax = 1.5, ArgStep = 1)\nplotVariogram(fTrace.oil)\n\nfTrace.oil.forecast <- predictFstat(fTrace.oil, .newCoordinates = COVARIATES[-train,][-9,], .type = \"UK\", .what=\"Oil\")\n\nfTrace.gas <- fstat(NULL, \"Gas\", COVARIATES[train,], as.data.frame(gasRatesFinal[,train]))\nfTrace.gas <- estimateDrift(\"~.\", fTrace.gas)\nfTrace.gas <- fvariogram(\"~GeolX_Rel+GeolY_Rel\", fTrace.gas, Nlags = 400, LagMax = 1.5, ArgStep = 1)\nplotVariogram(fTrace.gas)\nfTrace.gas <- fitVariograms(fTrace.gas, vgm(2e+05, \"Sph\", 0.2, 0), fitRanges=FALSE)\nfTrace.gas <- addCovariance(fTrace.gas)\nfTrace.gas <- estimateDrift(\"~.\", fTrace.gas, .type = \"GLS\")\nfTrace.gas <- fvariogram(\"~GeolX_Rel+GeolY_Rel\", fTrace.gas, Nlags = 400, LagMax = 1.5, ArgStep = 1)\nplotVariogram(fTrace.gas)\n\nfTrace.gas.forecast <- predictFstat(fTrace.gas, .newCoordinates = COVARIATES[-train,][-9,], .type = \"UK\", .what=\"Gas\")\n\n\nerror.OIL.trace <- apply(fTrace.oil.forecast$Forecast - oilRatesFinal[,-train][,-9],2, function(x) sum(x^2))/oil.SSE\nerror.GAS.trace <- apply(fTrace.gas.forecast$Forecast - gasRatesFinal[,-train][,-9],2, function(x) sum(x^2))/gas.SSE\n\nerrTable.2 <- cbind(StatCompute(error.OIL.trace, c(\"min\",\"mean\",\"median\",\"sd\",\"max\")),\n                  StatCompute(error.GAS.trace, c(\"min\",\"mean\",\"median\",\"sd\",\"max\")))\ncolnames(errTable.2) <- c(\"Oil\", \"Gas\")\n\nerrTable\nround(t(errTable.2),3)\n\nboxDATA <- cbind.data.frame(OIL.trace = error.OIL.trace, OIL.rf = error.OIL[-9], GAS.trace = error.GAS.trace, GAS.rf = error.GAS[-9])\n\nboxplot(boxDATA, xlab=\"method\", ylab=\"SSE\")\npar(mfrow=c(2,1))\nplot(boxDATA$OIL.trace, boxDATA$OIL.rf)\nabline(0,1, col=\"red\")\nplot(boxDATA$GAS.trace, boxDATA$GAS.rf)\nabline(0,1, col=\"red\")\n\n# Projection based cokriging:\nGAS.Responses.fd <- smooth.basis(1:600, gasRatesFinal[,train], basis)\nOIL.Responses.fd <- smooth.basis(1:600, oilRatesFinal[,train], basis)\n\nGAS.Responses.fd.pca <- pca.fd(GAS.Responses.fd$fd, 2)\nGAS.Responses.fd.pca.vrmx <- varmx.pca.fd(GAS.Responses.fd.pca, 2)\nGAS.MEAN <- eval.fd(1:600, GAS.Responses.fd.pca.vrmx$meanfd)\nGAS.FPCS <- eval.fd(1:600, GAS.Responses.fd.pca.vrmx$harmonics)\n\nOIL.Responses.fd.pca <- pca.fd(OIL.Responses.fd$fd, 2)\nOIL.Responses.fd.pca.vrmx <- varmx.pca.fd(OIL.Responses.fd.pca, 2)\nOIL.MEAN <- eval.fd(1:600, OIL.Responses.fd.pca.vrmx$meanfd)\nOIL.FPCS <- eval.fd(1:600, OIL.Responses.fd.pca.vrmx$harmonics)\n\n\nfsFPCA <- fstat(NULL,\"oil-pc1\", COVARIATES[train,], as.data.frame(OIL.Responses.fd.pca.vrmx$scores[,1]), scalar = TRUE)\nfsFPCA <- fstat(fsFPCA,\"oil-pc2\", COVARIATES[train,], as.data.frame(OIL.Responses.fd.pca.vrmx$scores[,2]), scalar = TRUE)\nfsFPCA <- fstat(fsFPCA,\"gas-pc1\", COVARIATES[train,], as.data.frame(GAS.Responses.fd.pca.vrmx$scores[,1]), scalar = TRUE)\nfsFPCA <- fstat(fsFPCA,\"gas-pc2\", COVARIATES[train,], as.data.frame(GAS.Responses.fd.pca.vrmx$scores[,2]), scalar = TRUE)\nfsFPCA <- estimateDrift(\"~.\", fsFPCA)\nfsFPCA <- fvariogram(\"~GeolX_Rel + GeolY_Rel\", fsFPCA, Nlags=100, LagMax = 0.7, ArgStep = 1,\n                     useResidual = TRUE, crossMode = \"conventional\")\nplotVariogram(fsFPCA)\nfsFPCA <- fitVariograms(fsFPCA, vgm(1, \"Mat\", 0.2, 250000, kappa=0.4),\n                        fitRanges = FALSE, forceNugget = FALSE)\nfsFPCA <- addCovariance(fsFPCA)\nfsFPCA <- estimateDrift(\"~.\", fsFPCA, .type = \"GLS\")\nfsFPCA <- fvariogram(\"~GeolX_Rel + GeolY_Rel\", fsFPCA, Nlags=100, LagMax = 0.7, ArgStep = 1,\n                     useResidual = TRUE, crossMode = \"conventional\")\nplotVariogram(fsFPCA)\nfsFPCA <- fitVariograms(fsFPCA, vgm(1, \"Mat\", 0.2, 250000, kappa=0.4),\n                        fitRanges = FALSE, forceNugget = FALSE)\n\nfsFPCA.oil.pc1.forecast <- predictFstat(fsFPCA, .newCoordinates = COVARIATES[-train,][-9,],\n                                        .type = \"UcoK\", .what=\"oil-pc1\")\nfsFPCA.oil.pc2.forecast <- predictFstat(fsFPCA, .newCoordinates = COVARIATES[-train,][-9,],\n                                        .type = \"UcoK\", .what=\"oil-pc2\")\nfsFPCA.gas.pc1.forecast <- predictFstat(fsFPCA, .newCoordinates = COVARIATES[-train,][-9,],\n                                        .type = \"UcoK\", .what=\"gas-pc1\")\nfsFPCA.gas.pc2.forecast <- predictFstat(fsFPCA, .newCoordinates = COVARIATES[-train,][-9,],\n                                        .type = \"UcoK\", .what=\"gas-pc2\")\n\nfsFPCA.OIL.forecast <- assemble(OIL.MEAN, OIL.FPCS, cbind(fsFPCA.oil.pc1.forecast$Forecast,\n                                                           fsFPCA.oil.pc2.forecast$Forecast))\nfsFPCA.GAS.forecast <- assemble(GAS.MEAN, GAS.FPCS, cbind(fsFPCA.gas.pc1.forecast$Forecast,\n                                                          fsFPCA.gas.pc2.forecast$Forecast))\n\nerror.OIL.projection <- apply(fsFPCA.OIL.forecast - oilRatesFinal[,-train][,-9],2, function(x) sum(x^2))/oil.SSE\nerror.GAS.projection <- apply(fsFPCA.GAS.forecast - gasRatesFinal[,-train][,-9],2, function(x) sum(x^2))/gas.SSE\n\nerrTable.3 <- cbind(StatCompute(error.OIL.projection, c(\"min\",\"mean\",\"median\",\"sd\",\"max\")),\n                    StatCompute(error.GAS.projection, c(\"min\",\"mean\",\"median\",\"sd\",\"max\")))\ncolnames(errTable.3) <- c(\"Oil\", \"Gas\")\nround(t(errTable.3),3)\n\n\n# Monte Carlo:\nrm(list=setdiff(ls(),c(\"oilRatesFinal\",\"gasRatesFinal\",\"COVARIATES\",\"rawCompletion\",\"oilRates\",\"gasRates\",\"basis\")))\nD.oil <- as.matrix(dist(t(oilRatesFinal)))\nD.gas <- as.matrix(dist(t(gasRatesFinal)))\nD.oil <- D.oil / max(D.oil)\nD.gas <- D.gas / max(D.gas)\nD <- D.oil + D.gas\n\noil.MEAN <- rowMeans(oilRatesFinal)\ngas.MEAN <- rowMeans(gasRatesFinal)\noil.SSE <- mean(apply(oilRatesFinal, 2, function(x) sum((x-oil.MEAN)^2)))\ngas.SSE <- mean(apply(gasRatesFinal, 2, function(x) sum((x-gas.MEAN)^2)))\n\nsource(\"./mcFunction.R\")\n\n\nlibrary(doParallel)\nlibrary(foreach)\ncl <- makeCluster(4)\nregisterDoParallel(cl)\nsets <- seq(30,150,by=10)\n\nmcResult <- vector('list', length(sets))\n\nfor(i in 1:length(sets)) {\n\n  .Train <- sets[i]\n\n  mcResult[[i]] <- Reduce(rbind, foreach(c.seed = 1:100, .packages = c('functInterp', 'fda', 'fTree', 'plyr')) %dopar% {\n    set.seed(c.seed)\n    .train <- sample(188,.Train)\n    .test  <- sample(seq(1,188)[-.train], 38)\n    tryCatch(mcFunction(.train, .test), error = function(c) NULL)\n  })\n\n}\n\nstopCluster(cl)\n\nsave.image(\"./monteCarloResult.RData\")\n\n\nlibrary(reshape2)\nlibrary(ggplot2)\nggDATA <- Reduce(rbind, mcResult)\nggDATA <- melt(ggDATA, id=c(\"nTrain\",\"type\"))\nggDATA$variable <- as.character(ggDATA$variable)\ntemp <- Reduce(rbind, strsplit(ggDATA$variable,\"[.]\"))\n\nggDATA$method <- temp[,1]\nggDATA$stats  <- temp[,2]\nggDATA$nTrain <- factor(ggDATA$nTrain)\n\nuniversalTheme = theme_grey() +\n  theme(axis.line = element_line(size = 0.5, colour = \"black\"),\n        axis.text = element_text(size = 13, face='bold'),\n        axis.title.x = element_text(size = 13, face='bold'),\n        axis.title.y = element_text(size = 13, colour='black', face='bold'),\n        strip.text.x = element_text(size = 13, colour = \"black\", face='bold'),\n        strip.text.y = element_text(size = 13, colour = \"black\", face='bold'),\n        strip.background = element_rect(fill=\"orange\"),\n        legend.position = \"top\",\n        legend.text=element_text(size=11, face = \"bold\"),\n        legend.title=element_text(size=13),\n        panel.border = element_rect(colour = \"black\", fill=NA, size=1))\n\n\npng(filename=\"./img/monte_carlo.png\", units=\"in\", width=11, height = 8, res=300)\nggplot(ggDATA) + geom_boxplot(aes(x=nTrain, y=value, colour=method)) + scale_y_log10() +\n  facet_wrap(type~stats, scale=\"free_y\") + universalTheme + ylab(\"log(SSE)\")\ndev.off()\n\nhead(ggDATA)\nggDATA <- subset(ggDATA, method != \"projection\")\npng(filename=\"./img/monte_carlo2.png\", units=\"in\", width=11, height = 8, res=300)\nggplot(ggDATA) + geom_boxplot(aes(x=nTrain, y=value, colour=method)) + scale_y_log10() +\n  facet_wrap(type~stats, scale=\"free_y\") + universalTheme + ylab(\"log(SSE)\")\ndev.off()\n",
    "created" : 1510267153310.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "292240502",
    "id" : "C49CC208",
    "lastKnownWriteTime" : 1510285133,
    "last_content_update" : 1510285133357,
    "path" : "~/Google Drive/Functional_Research/PhD_Dissertation/Functional_Interpolation_Multivariate/Main.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}